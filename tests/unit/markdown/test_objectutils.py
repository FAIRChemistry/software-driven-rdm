# Generated by CodiumAI

import pytest

from sdRDM.markdown.objectutils import (
    has_small_type,
    is_linked_type,
    is_reference_type,
    is_remote_type,
)


class TestIsLinkedType:
    # Returns True if the given type is a markdown link
    @pytest.mark.unit
    def test_returns_true_if_type_is_markdown_link(self):
        # Arrange
        dtype = "[Object](#object)"

        # Act
        result = is_linked_type(dtype)

        # Assert
        assert result == True

    # Returns False if the given type is not a markdown link
    @pytest.mark.unit
    def test_returns_false_if_type_is_not_markdown_link(self):
        # Arrange
        dtype = "int"

        # Act
        result = is_linked_type(dtype)

        # Assert
        assert result == False

    # Returns False if the given type is an empty string
    @pytest.mark.unit
    def test_returns_false_if_type_is_empty_string(self):
        # Arrange
        dtype = ""

        # Act
        result = is_linked_type(dtype)

        # Assert
        assert result == False


class TestIsReferenceType:
    # Returns True for a string that matches the reference type pattern.
    @pytest.mark.unit
    def test_returns_true_for_matching_reference_type_pattern(self):
        dtype = "@ReferenceType.attribute"
        assert is_reference_type(dtype) is True

    # Returns False for a string that does not match the reference type pattern.

    @pytest.mark.unit
    def test_returns_false_for_non_matching_reference_type_pattern(self):
        dtype = "NotReferenceType"
        assert is_reference_type(dtype) is False

    # Returns False for an empty string.
    @pytest.mark.unit
    def test_returns_false_for_empty_string(self):
        dtype = ""
        assert is_reference_type(dtype) is False

    # Returns False for a string that contains only whitespace characters.
    @pytest.mark.unit
    def test_returns_false_for_whitespace_string(self):
        dtype = "   "
        assert is_reference_type(dtype) is False


class TestHasSmallType:
    # Returns True if the input string contains a small type pattern.
    @pytest.mark.unit
    def test_contains_small_type_pattern(self):
        dtype = "{name: type}"
        assert has_small_type(dtype) is True

        dtype = "{name: type, name2: type2}"
        assert has_small_type(dtype) is True

        dtype = "{name: type, name2: type2, name3: type3}"
        assert has_small_type(dtype) is True

        dtype = "name: type"
        assert has_small_type(dtype) is False

        dtype = ""
        assert has_small_type(dtype) is False

        dtype = "   "
        assert has_small_type(dtype) is False

        dtype = "{name: type"
        assert has_small_type(dtype) is False

        dtype = "{name: }"
        assert has_small_type(dtype) is True


# Generated by CodiumAI

import pytest


class TestIsRemoteType:
    # Returns True when given a valid remote type URL.
    @pytest.mark.unit
    def test_valid_remote_type_url(self):
        assert is_remote_type("https://github.com/username/repo.git@obj") == True

    # Returns False when given an invalid remote type URL.
    @pytest.mark.unit
    def test_invalid_remote_type_url(self):
        assert is_remote_type("https://github.com/username/repo@obj") == False

    # Returns False when given an empty string.
    @pytest.mark.unit
    def test_empty_string(self):
        assert is_remote_type("") == False

    # Returns False when given a non-string input.
    @pytest.mark.unit
    def test_non_string_input(self):
        assert is_remote_type(123) == False

    # Returns False when given a local type URL.
    @pytest.mark.unit
    def test_local_type_url(self):
        assert is_remote_type("file:///path/to/repo.git@branch") == False

    # Returns False when given a URL with an invalid format.
    @pytest.mark.unit
    def test_invalid_url_format(self):
        assert is_remote_type("https://github.com/username/repo.git") == False

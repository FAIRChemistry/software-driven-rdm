@forge_signature
class {{name}}({% if inherit is not none %}
                {{inherit}}
                {% else %}sdRDM.DataModel{% endif %},
                {% if namespaces %}
                nsmap = {
                {% for key, value in namespaces.items() %}
                    "{{key}}": "{{value}}",
                {% endfor %}
                },
                {% endif %}
                search_mode="unordered",
                ):


    {% if docstring is not none %}"""{{ docstring }}"""{% endif %}

    {% if add_id_field %}
    id: Optional[str] = attr(
            name="id",
            alias="id",
            description="Unique identifier of the given object.",
            default_factory=lambda: str(uuid4()),
    )
    {% endif %}

    {% for attribute in attributes %}
    {{ attribute }}
    {% endfor %}

    annotation_: List[str] = element(
        name="annotation_",
        alias="@type",
        description="Annotation of the given object.",
        default=[
            "{{ name }}",
            {% if annotation is not none %}{{ annotation }},{% endif %}
        ],
    )

    {% if repo is not none %}_repo: Optional[str] = PrivateAttr(default="{{repo}}"){% endif %}
    {% if commit is not none %}_commit: Optional[str] = PrivateAttr(default="{{commit}}"){% endif %}

    _raw_xml_data: Dict = PrivateAttr(default_factory=dict)

    @model_validator(mode="after")
    def _parse_raw_xml_data(self):
        for attr, value in self:
            if isinstance(value, (ListPlus, list)) and all(
                isinstance(i, _Element) for i in value
            ):
                self._raw_xml_data[attr] = [elem2dict(i) for i in value]
            elif isinstance(value, _Element):
                self._raw_xml_data[attr] = elem2dict(value)

        return self

    @field_validator("annotation_")
    @classmethod
    def _validate_annotation(cls, value):
        """Check if the annotation that has been set is a valid URL."""
        if not validators.url(value):
            raise ValueError(f"Invalid URL: {value}")
        return value
